# Zanai Modes - Extens√£o do Kilocode
# Arquivo de configura√ß√£o para integra√ß√£o com VS Code + Kilocode

version: "1.0.0"
description: "Zanai - Sistema de Agentes Inteligentes como extens√£o do Kilocode"

# Modos personalizados para o Zanai
modes:
  # Modo 1: Agent Templates
  zanai-agent-templates:
    name: "Zanai Agent Templates"
    description: "Crie templates de agentes especializados para diversas tarefas"
    category: "development"
    icon: "ü§ñ"
    
    # Configura√ß√£o do modo
    config:
      system_prompt: |
        Voc√™ √© um especialista em criar templates de agentes inteligentes.
        Sua fun√ß√£o √© ajudar o usu√°rio a criar agentes especializados com:
        1. Configura√ß√£o YAML precisa
        2. Base de conhecimento em Markdown
        3. Defini√ß√£o de capacidades espec√≠ficas
        4. Melhores pr√°ticas de design de agentes
        
        Sempre estruture sua resposta com:
        - Nome do agente
        - Descri√ß√£o clara
        - Configura√ß√£o YAML completa
        - Base de conhecimento essencial
        - Exemplos de uso
        
      temperature: 0.3
      max_tokens: 2000
      
    # Templates pr√©-definidos
    templates:
      code-reviewer:
        name: "Code Reviewer"
        description: "Agente especializado em revis√£o de c√≥digo"
        config: |
          name: Code Reviewer
          version: 1.0.0
          capabilities:
            - analyze_code_quality
            - suggest_improvements
            - detect_security_issues
            - check_best_practices
        knowledge: |
          # Code Reviewer
          Especialista em revis√£o de c√≥digo com foco em:
          - Qualidade e manuten√ß√£o
          - Seguran√ßa
          - Performance
          - Melhores pr√°ticas
          
      documentation-assistant:
        name: "Documentation Assistant"
        description: "Agente para cria√ß√£o e gest√£o de documenta√ß√£o"
        config: |
          name: Documentation Assistant
          version: 1.0.0
          capabilities:
            - generate_docs
            - format_markdown
            - create_examples
            - maintain_consistency
        knowledge: |
          # Documentation Assistant
          Especialista em documenta√ß√£o t√©cnica com foco em:
          - Clareza e precis√£o
          - Formata√ß√£o padr√£o
          - Exemplos pr√°ticos
          - Consist√™ncia de estilo

  # Modo 2: Agent Composition
  zanai-agent-composition:
    name: "Zanai Agent Composition"
    description: "Orquestre m√∫ltiplos agentes para tarefas complexas"
    category: "development"
    icon: "üé≠"
    
    config:
      system_prompt: |
        Voc√™ √© um maestro de agentes inteligentes.
        Sua fun√ß√£o √© ajudar o usu√°rio a:
        1. Combinar m√∫ltiplos agentes para tarefas complexas
        2. Definir fluxos de trabalho entre agentes
        3. Otimizar a colabora√ß√£o entre especialistas
        4. Criar orquestra√ß√µes eficientes
        
        Sempre estruture sua resposta com:
        - An√°lise da tarefa complexa
        - Sele√ß√£o de agentes adequados
        - Fluxo de trabalho proposto
        - Configura√ß√£o da composi√ß√£o
        - Estrat√©gia de execu√ß√£o
        
      temperature: 0.4
      max_tokens: 2500
      
    # Padr√µes de composi√ß√£o
    composition_patterns:
      full-stack-analysis:
        name: "Full Stack Analysis"
        agents:
          - code-reviewer
          - documentation-assistant
          - api-generator
        workflow: |
          1. Code Reviewer analisa o c√≥digo
          2. API Generator sugere melhorias
          3. Documentation Assistant cria documenta√ß√£o
          
      project-lifecycle:
        name: "Project Lifecycle"
        agents:
          - requirements-analyst
          - architect-designer
          - code-implementer
          - qa-tester
        workflow: |
          1. Requirements Analyst define requisitos
          2. Architect Designer cria arquitetura
          3. Code Implementer desenvolve
          4. QA Tester valida qualidade

  # Modo 3: Agent Learning
  zanai-agent-learning:
    name: "Zanai Agent Learning"
    description: "Sistema de aprendizado cont√≠nuo para agentes"
    category: "development"
    icon: "üìö"
    
    config:
      system_prompt: |
        Voc√™ √© um especialista em aprendizado de m√°quina para agentes.
        Sua fun√ß√£o √© ajudar o usu√°rio a:
        1. Implementar sistemas de aprendizado cont√≠nuo
        2. Analisar padr√µes de execu√ß√£o
        3. Otimizar performance dos agentes
        4. Criar estrat√©gias de melhoria
        
        Sempre estruture sua resposta com:
        - An√°lise de dados de aprendizado
        - Identifica√ß√£o de padr√µes
        - Sugest√µes de otimiza√ß√£o
        - Estrat√©gias de melhoria
        - M√©tricas de sucesso
        
      temperature: 0.2
      max_tokens: 2000
      
    # Estrat√©gias de aprendizado
    learning_strategies:
      feedback_learning:
        name: "Feedback Learning"
        description: "Aprendizado baseado em feedback do usu√°rio"
        approach: |
          1. Coletar feedback qualitativo
          2. Analisar padr√µes de feedback
          3. Ajustar comportamentos do agente
          4. Validar melhorias
          
      pattern_recognition:
        name: "Pattern Recognition"
        description: "Reconhecimento de padr√µes em execu√ß√µes"
        approach: |
          1. Analisar hist√≥rico de execu√ß√µes
          2. Identificar padr√µes de sucesso
          3. Extrair melhores pr√°ticas
          4. Aplicar aprendizado

  # Modo 4: Visual Agent Studio
  zanai-visual-studio:
    name: "Zanai Visual Studio"
    description: "Interface visual para cria√ß√£o e gest√£o de agentes"
    category: "development"
    icon: "üé®"
    
    config:
      system_prompt: |
        Voc√™ √© um designer de interfaces visuais para agentes.
        Sua fun√ß√£o √© ajudar o usu√°rio a:
        1. Criar interfaces intuitivas para gest√£o de agentes
        2. Designar fluxos de trabalho visuais
        3. Otimizar experi√™ncia do usu√°rio
        4. Criar dashboards de monitoramento
        
        Sempre estruture sua resposta com:
        - An√°lise de requisitos da interface
        - Design da interface proposta
        - Fluxos de usu√°rio
        - Componentes visuais
        - Estrat√©gia de implementa√ß√£o
        
      temperature: 0.5
      max_tokens: 2000
      
    # Componentes visuais
    visual_components:
      agent-canvas:
        name: "Agent Canvas"
        description: "Canvas visual para arrastar e soltar agentes"
        features:
          - Drag and drop de agentes
          - Conex√µes visuais
          - Propriedades edit√°veis
          - Preview em tempo real
          
      workflow-designer:
        name: "Workflow Designer"
        description: "Designer visual de fluxos de trabalho"
        features:
          - N√≥s conect√°veis
          - Fluxos condicionais
          - Paraleliza√ß√£o
          - Debug visual

# Configura√ß√µes globais do Zanai
global_settings:
  # Integra√ß√£o com Kilocode
  kilocode_integration:
    enabled: true
    auto_sync: true
    workspace_path: ".zanai-workspace"
    
  # Configura√ß√µes de execu√ß√£o
  execution:
    max_concurrent_agents: 5
    timeout_per_agent: 30000
    retry_attempts: 3
    
  # Configura√ß√µes de aprendizado
  learning:
    auto_record: true
    confidence_threshold: 0.8
    max_learning_records: 1000
    
  # Configura√ß√µes de interface
  ui:
    theme: "system"
    language: "pt-BR"
    auto_save: true
    
# Vari√°veis de ambiente
environment:
  # Configura√ß√µes do banco de dados
  database:
    url: "sqlite:./zanai.db"
    
  # Configura√ß√µes da API
  api:
    port: 3000
    host: "localhost"
    
  # Configura√ß√µes do SDK de IA
  ai_sdk:
    model: "gpt-4"
    temperature: 0.7
    max_tokens: 2000