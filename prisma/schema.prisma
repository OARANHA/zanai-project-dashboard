// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user") // 'user', 'admin', 'company_admin', 'client'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos com o sistema Zanai
  agents    Agent[]
  workspaces Workspace[]
  
  // Relacionamentos com o sistema urbano
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  clients    Client[]
  
  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelos para o sistema Zanai
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  config      String   // JSON com configuração do workspace
  vscodeContext String? // JSON com contexto do VS Code
  lastSyncedAt DateTime? // Última sincronização com VS Code
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  agents      Agent[]
  compositions Composition[]
  
  @@index([userId])
}

model Agent {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  type        String   // 'template', 'custom', 'composed'
  config      String   // YAML com configuração do agente
  knowledge   String?  // Markdown com conhecimento do agente
  templateId  String?  // ID do template se baseado em template
  status      String   @default("active") // 'active', 'inactive', 'training'
  workspaceId String
  userId      String?  // Opcional para agentes compartilhados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  compositions Composition[]
  learnings   Learning[]
  executions  AgentExecution[]
  metrics     AgentMetrics[]
  
  @@index([workspaceId])
  @@index([userId])
}

model Composition {
  id            String   @id @default(cuid())
  name          String
  description   String?
  config        String   // YAML com configuração da composição
  status        String   @default("draft") // 'draft', 'active', 'inactive'
  workspaceId   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  workspace     Workspace  @relation(fields: [workspaceId], references: [id])
  agents        Agent[]
  executions    Execution[]
  
  @@index([workspaceId])
}

model Learning {
  id          String   @id @default(cuid())
  agentId     String
  type        String   // 'feedback', 'pattern', 'adaptation'
  data        String   // JSON com dados de aprendizado
  confidence  Float    @default(0.0)
  createdAt   DateTime @default(now())
  
  agent       Agent    @relation(fields: [agentId], references: [id])
  
  @@index([agentId])
}

model AgentExecution {
  id           String   @id @default(cuid())
  agentId      String
  input        String
  output       String?
  status       String   @default("pending") // 'pending', 'running', 'completed', 'failed'
  context      String?  // JSON com contexto adicional
  vscodeContext String? // JSON com contexto do VS Code durante execução
  result       String?  // JSON com resultado detalhado
  error        String?  // Mensagem de erro se falhou
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  
  agent        Agent    @relation(fields: [agentId], references: [id])
  
  @@index([agentId])
  @@index([status])
}

model Execution {
  id           String   @id @default(cuid())
  compositionId String
  input        String
  results      String   // JSON com resultados da execução
  status       String   @default("pending") // 'pending', 'running', 'completed', 'failed'
  error        String?  // Mensagem de erro se falhou
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  
  composition  Composition @relation(fields: [compositionId], references: [id])
  
  @@index([compositionId])
  @@index([status])
}

model AgentMetrics {
  id          String   @id @default(cuid())
  timestamp   BigInt   @map("timestamp")
  agentId     String
  metricName  String
  metricValue Float
  tags        String?
  
  agent       Agent    @relation(fields: [agentId], references: [id])
  
  @@index([agentId, timestamp])
  @@index([metricName, timestamp])
  @@map("agent_metrics")
}

// Modelos para o sistema urbano
model Company {
  id          String   @id @default(cuid())
  name        String
  cnpj        String   @unique
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  status      String   @default("active") // 'active', 'inactive', 'pending'
  plan        String   @default("basic") // 'basic', 'premium', 'enterprise'
  maxUsers    Int      @default(5)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
  projects    Project[]
  reports     Report[]
  
  @@map("companies")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  cpf         String   @unique
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  birthDate   DateTime?
  status      String   @default("active") // 'active', 'inactive', 'pending'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  projects    Project[]
  contracts   Contract[]
  
  @@map("clients")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("planning") // 'planning', 'active', 'completed', 'cancelled'
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  companyId   String?
  clientId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company? @relation(fields: [companyId], references: [id])
  client      Client?  @relation(fields: [clientId], references: [id])
  tasks       Task[]
  reports     Report[]
  
  @@map("projects")
}

model Contract {
  id          String   @id @default(cuid())
  title       String
  description String?
  value       Float
  startDate   DateTime
  endDate     DateTime
  status      String   @default("draft") // 'draft', 'active', 'completed', 'cancelled'
  clientId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  client      Client   @relation(fields: [clientId], references: [id])
  
  @@map("contracts")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending") // 'pending', 'in_progress', 'completed', 'cancelled'
  priority    String   @default("medium") // 'low', 'medium', 'high', 'urgent'
  dueDate     DateTime?
  projectId   String
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  project     Project  @relation(fields: [projectId], references: [id])
  
  @@map("tasks")
}

model Report {
  id          String   @id @default(cuid())
  title       String
  type        String   // 'financial', 'progress', 'analytics', 'custom'
  data        String   // JSON com dados do relatório
  period      String   // 'daily', 'weekly', 'monthly', 'quarterly', 'yearly'
  companyId   String?
  projectId   String?
  createdAt   DateTime @default(now())
  
  company     Company? @relation(fields: [companyId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  
  @@map("reports")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // 'create', 'update', 'delete', 'login', 'logout'
  entityType  String   // 'user', 'company', 'client', 'project', etc.
  entityId    String?
  userId      String?
  oldValues   String?  // JSON com valores antigos
  newValues   String?  // JSON com valores novos
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}